# -*- coding: utf-8 -*-
"""Chapter 6: - Simple Linear Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bm3L6VxetviYKQ_U8ZwoHk-bWOc254Kv

1. Importing the Libraries
"""

# Importing the Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""2. Data Acquistion"""

# Importing the Dataset
dataset = pd.read_csv('Stipend_Data.csv')

"""3.  Creating Data Frames

"""

# Creating Data Frames
X = dataset.iloc[:, :- 1].values
y = dataset.iloc[:, 1].values

"""4. Dataset Splition"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size= 1/3, random_state = 0)

"""5. Modeling"""

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression()
linear_regressor.fit(X_train, y_train)

"""6. Predictions"""

# Predicting the Test set results
y_pred = linear_regressor.predict(X_test)

"""7.  Visualising the Training set results

"""

# Visualising the Training set results
plt.scatter(X_train, y_train, color = 'red')
plt.title('Visualization of Training Data')
plt.xlabel('Years of Research Experience')
plt.ylabel('Stipend')
plt.plot(X_train, linear_regressor.predict(X_train), color = 'blue')

"""8. Visualising the Test set results"""

# Visualising the Test set results
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_test, linear_regressor.predict(X_test), color = 'blue')
plt.title('Visualization of Test Data')
plt.xlabel('Years of Experience')
plt.ylabel('Stipend')
plt.show()

"""9. Performance Evaluation"""

# Importing metrics library
from sklearn import metrics
# Evaluating the model and printing the results using MAE
print(metrics.mean_absolute_error(y_test, y_pred))

# Evaluating the model and printing the results using MSE
print(metrics.mean_squared_error(y_test, y_pred))

# Importing the math library
import math

# Evaluating the model and printing the results using RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

"""###############################################################################################

CASE STUDY:- USA Housing

2.1 Importing the Libraries
"""

#Importing the Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""2.2 # Data Acquisition

"""

# Data Acquisition
Path_URL_Kaggle = 'https://storage.googleapis.com/kagglesdsdata/datasets/6988/10054/USA_Housing.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20211103%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20211103T055705Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=a9dcca0b7f2bd8653bac714566bd5b917bbe414cbc34aa11ade5f3a47e84ee7f0f37d96002aaff42c26f6c929a8f2bdf12da53b199dee9bcb77aae699aba6284053246601a9e43de14a691da5b07cdb841bf5862b4199be1525757afe8fef3d468141966b6d2caac907d01c6f0a4745a40dff880de26b1a0df92a025267c4a0f7aa5f34b40f21933ac61946a120134524c7bf872ea552168fbc4c146954117b1ea5a659ba48480842badecb467c9ea5ace83478ac595b4b4668191b3f9096b7fa8bba98914bf6d5bbf5616a603af3dc7787551af98247f982337cb59d79b57a50cc8aba2515905382b980f1520d060bc8f5bab197fc1bdaacd9af079a1c17d03'
dataset = pd.read_csv(Path_URL_Kaggle)

"""2.3 Creating Data Frames"""

# Creating Data Frames
X = dataset.iloc[:, 2:3].values
y = dataset.iloc[: ,-2: - 1].values

"""2.4 Splitting the dataset into training and testing"""

#Splitting the dataset into training and testing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 1/3, random_state = 0)

"""2.5 Modeling"""

from sklearn.linear_model import LinearRegression
linear_regressor = LinearRegression()
linear_regressor.fit(X_train, y_train)

"""2.6 Predicting the Test set Results"""

#Predicting the Test set Results
y_pred = linear_regressor.predict(X_test)

"""2.7 Visualising the Training set results"""

# Visualising the Training set results
plt.scatter(X_train, y_train, color = 'red')
plt.title('Visualization of Training Data')
plt.xlabel('Years of Research Experience')
plt.ylabel('Stipend')
plt.plot(X_train, linear_regressor.predict(X_train), color = 'blue')

"""2.8 Visualising the Test set results"""

# Visualising the Test set results
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_test, linear_regressor.predict(X_test), color = 'blue')
plt.title('Visualization of Test Data')
plt.xlabel('Years of Experience')
plt.ylabel('Stipend')
plt.show()

"""2.9 Evaluating the model using Regression metrics"""

# Importing metrics library
from sklearn import metrics
# Evaluating the model and printing the results using MAE
print(metrics.mean_absolute_error(y_test, y_pred))

# Evaluating the model and printing the results using MSE
print(metrics.mean_squared_error(y_test, y_pred))

# Importing the math library
import math

# Evaluating the model and printing the results using RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
